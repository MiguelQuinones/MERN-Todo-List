{"version":3,"sources":["components/createTask.js","components/editTask.js","components/deleteTask.js","components/todoList.js","list-task.svg","App.js","reportWebVitals.js","index.js"],"names":["createTask","props","handleChangeDescription","bind","handleChangePriority","handleSubmit","state","task_description","task_priority","task_completed","e","this","setState","target","value","preventDefault","newTask","fetch","method","headers","body","JSON","stringify","catch","error","console","history","push","id","onSubmit","className","type","placeholder","onChange","name","checked","htmlFor","Component","editTask","handleChangeCompleted","axios","get","match","params","then","response","data","editedTask","post","log","deleteTask","readOnly","Task","task","to","_id","todoList","tasks","map","currentTask","index","taskList","THEMES","THEME_KEY","App","window","localStorage","setItem","getItem","theme","document","style","backgroundColor","color","saveSettings","tableSwitch","getElementById","navbar","src","logo","alt","aria-current","onClick","themeSwitch","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8877a91f.chunk.js","sourcesContent":["// Page for creating a task to add to the todo list\r\n\r\n// Necessary import statements\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class createTask extends Component {\r\n    \r\n    // Constructor to set default state\r\n    constructor( props ) {\r\n        super( props ); \r\n\r\n        // Bind user inputs to functions\r\n        this.handleChangeDescription = this.handleChangeDescription.bind( this );\r\n        this.handleChangePriority = this.handleChangePriority.bind( this );\r\n        this.handleSubmit = this.handleSubmit.bind( this );\r\n\r\n        // Default state descriptions\r\n        this.state = {\r\n            task_description : '',\r\n            task_priority : '',\r\n            task_completed : false\r\n        }\r\n    }\r\n\r\n    // Function to update state of the description\r\n    handleChangeDescription( e ) {\r\n        this.setState ( {\r\n            task_description : e.target.value\r\n        } );\r\n    }\r\n\r\n    // Function to set the state of the priority for the task\r\n    handleChangePriority( e ) {\r\n        this.setState ( {\r\n            task_priority : e.target.value\r\n        } );\r\n    }\r\n\r\n    // Function to handle submission after a user has created their task\r\n    handleSubmit( e ) {\r\n        // Prevent page from refreshing after submission\r\n        e.preventDefault();\r\n\r\n        // Create object to hold user input\r\n        const newTask = {\r\n            task_description : this.state.task_description,\r\n            task_priority: this.state.task_priority,\r\n            task_completed: this.state.task_completed\r\n        };\r\n\r\n        // Send request to database comprised of stringified object\r\n        fetch( 'http://localhost:4000/tododb/add', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify( newTask )\r\n        })\r\n        .catch( ( error ) => {\r\n            console.error( \"Error:\", error)\r\n        });\r\n\r\n        // Set states back to default values after submission\r\n        this.setState ({\r\n            task_description : '',\r\n            task_priority : '',\r\n            task_completed : false\r\n        })\r\n\r\n        // Return user to list after submission\r\n        this.props.history.push( '/' );\r\n    }\r\n\r\n    // Render function that displays form to user\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 id = \"header1\"> Create a New Task </h1>\r\n                <form onSubmit = { this.handleSubmit } >\r\n                    <div className = \"form-group\">\r\n                        <label className = \"form-label\"> Task Description: </label>\r\n                        <input type = \"text\"\r\n                               className = \"form-control\"\r\n                               placeholder = \"Enter the task you'd like to add here\"\r\n                               value = { this.state.task_description }\r\n                               onChange = { this.handleChangeDescription }\r\n                               />\r\n                    </div>\r\n                    <div>\r\n                        <label> Set Task Priority: </label>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <div className = \"custom-control custom-switch\">\r\n                            <input className = \"custom-control-input\"\r\n                                   type = \"checkbox\"\r\n                                   name = \"priorityOptions\"\r\n                                   id = \"customSwitch1\"\r\n                                   value = \"Low\"\r\n                                   checked = { this.state.task_priority === 'Low' }\r\n                                   onChange = { this.handleChangePriority }\r\n                                   />\r\n                            <label className = \"custom-control-label\" htmlFor = \"customSwitch1\"> Low </label>\r\n                        </div>\r\n                        <div className = \"custom-control custom-switch\">\r\n                            <input className = \"custom-control-input\"\r\n                                   type = \"checkbox\"\r\n                                   name = \"priorityOptions\"\r\n                                   id = \"customSwitch2\"\r\n                                   value = \"Medium\"\r\n                                   checked = { this.state.task_priority === 'Medium' }\r\n                                   onChange = { this.handleChangePriority }\r\n                                   />\r\n                            <label className = \"custom-control-label\" htmlFor = \"customSwitch2\"> Medium </label>\r\n                        </div>\r\n                        <div className = \"custom-control custom-switch\">\r\n                            <input className = \"custom-control-input\"\r\n                                   type = \"radio\"\r\n                                   name = \"priorityOptions\"\r\n                                   id = \"customSwitch3\"\r\n                                   value = \"High\"\r\n                                   checked = { this.state.task_priority === 'High' }\r\n                                   onChange = { this.handleChangePriority }\r\n                                   />\r\n                            <label className = \"custom-control-label\" htmlFor = \"customSwitch3\"> High </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <input type = \"submit\" value = \"Add Task\" className = \"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","// Page for editing a task on the todo list\r\n\r\n// Necessary import statement\r\nimport axios from \"axios\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class editTask extends Component {\r\n    \r\n    // Constructor to set default state\r\n    constructor( props ) {\r\n        super( props );\r\n\r\n        // Bind user inputs to functions\r\n        this.handleChangeDescription = this.handleChangeDescription.bind( this );\r\n        this.handleChangePriority = this.handleChangePriority.bind( this );\r\n        this.handleChangeCompleted = this.handleChangeCompleted.bind( this );\r\n        this.handleSubmit = this.handleSubmit.bind( this );\r\n\r\n        // States of a task are empty by default\r\n        this.state = {\r\n            task_description: \"\",\r\n            task_priority: \"\",\r\n            task_completed: false\r\n        }\r\n    }\r\n\r\n    // Fetch specific task to be edited from DB via its id, then set its states according to edits from user\r\n    componentDidMount() {\r\n        axios.get( \"http://localhost:4000/tododb/\" + this.props.match.params.id )\r\n        .then( response => {\r\n            this.setState( {\r\n                task_description: response.data.task_description,\r\n                task_priority: response.data.task_priority,\r\n                task_completed: response.data.task_completed\r\n            })\r\n        })\r\n        .catch( ( error ) => {\r\n            console.error( \"Error:\", error )\r\n        })\r\n    }\r\n\r\n    // Ensures the state of the description is always up to date\r\n    handleChangeDescription( e ) {\r\n        this.setState( {\r\n            task_description: e.target.value\r\n        } );\r\n    }\r\n\r\n    // Ensures the state of the priority is always up to date\r\n    handleChangePriority( e ) {\r\n        this.setState( {\r\n            task_priority: e.target.value\r\n        } );\r\n    }\r\n\r\n    // Sets completion state to opposite of current value\r\n    handleChangeCompleted() {\r\n        this.setState( {\r\n            task_completed: !this.state.task_completed\r\n        } );\r\n    }\r\n\r\n    // Handles submission -- sends edited task to DB to be displayed back to user\r\n    handleSubmit( e ) {\r\n        e.preventDefault();\r\n\r\n        // Object to hold current states of edited task\r\n        const editedTask = {\r\n            task_description: this.state.task_description,\r\n            task_priority: this.state.task_priority,\r\n            task_completed: this.state.task_completed\r\n        }\r\n\r\n        // Send edited task back to DB to update the task\r\n        axios.post( \"http://localhost:4000/tododb/update/\" + this.props.match.params.id, editedTask)\r\n        .then( response => console.log( response.data ) );\r\n\r\n        // Return user to list after task has been updated\r\n        this.props.history.push( '/' );\r\n    }\r\n\r\n    // Render page that displays edit form to user\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 id = \"header1\"> Edit This Task </h1>\r\n                <form onSubmit = { this.handleSubmit } >\r\n                    <div className = \"form-group\">\r\n                        <label className = \"form-label\"> New Task Description: </label>\r\n                        <input type = \"text\"\r\n                               className = \"form-control\"\r\n                               placeholder = \"Enter the task you'd like to add here\"\r\n                               value = { this.state.task_description }\r\n                               onChange = { this.handleChangeDescription }\r\n                               />\r\n                    </div>\r\n                    <div>\r\n                        <label> Set Priority: </label>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <div className = \"custom-control custom-switch\">\r\n                            <input className = \"custom-control-input\"\r\n                                   type = \"checkbox\"\r\n                                   name = \"priorityOptions\"\r\n                                   id = \"customSwitch1\"\r\n                                   value = \"Low\"\r\n                                   checked = { this.state.task_priority === 'Low' }\r\n                                   onChange = { this.handleChangePriority }\r\n                                   />\r\n                            <label className = \"custom-control-label\" htmlFor = \"customSwitch1\"> Low </label>\r\n                        </div>\r\n                        <div className = \"custom-control custom-switch\">\r\n                            <input className = \"custom-control-input\"\r\n                                   type = \"checkbox\"\r\n                                   name = \"priorityOptions\"\r\n                                   id = \"customSwitch2\"\r\n                                   value = \"Medium\"\r\n                                   checked = { this.state.task_priority === 'Medium' }\r\n                                   onChange = { this.handleChangePriority }\r\n                                   />\r\n                            <label className = \"custom-control-label\" htmlFor = \"customSwitch2\"> Medium </label>\r\n                        </div>\r\n                        <div className = \"custom-control custom-switch\">\r\n                            <input className = \"custom-control-input\"\r\n                                   type = \"radio\"\r\n                                   name = \"priorityOptions\"\r\n                                   id = \"customSwitch3\"\r\n                                   value = \"High\"\r\n                                   checked = { this.state.task_priority === 'High' }\r\n                                   onChange = { this.handleChangePriority }\r\n                                   />\r\n                            <label className = \"custom-control-label\" htmlFor = \"customSwitch3\"> High </label>\r\n                        </div>\r\n                        <div className = \"form-check\">\r\n                            <input className = \"form-check-input\"\r\n                                   type = \"checkbox\"\r\n                                   name = \"completedCheckbox\"\r\n                                   id = \"customSwitch4\"\r\n                                   onChange = { this.handleChangeCompleted }\r\n                                   checked = { this.state.task_completed }\r\n                                   value = { this.state.task_completed }\r\n                                   />\r\n                            <label className = \"form-check-label\" htmlFor = \"completedCheckbox\"> Completed </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <input type = \"submit\" value = \"Update Task\" className = \"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","// Page for deleting a task from the list\r\n\r\n// Necessary import statements\r\nimport axios from \"axios\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class deleteTask extends Component {\r\n    \r\n    // Constructor to set default state\r\n    constructor( props ) {\r\n        super( props ); \r\n\r\n        // Bind user inputs to functions\r\n        this.handleChangeDescription = this.handleChangeDescription.bind( this );\r\n        this.handleChangePriority = this.handleChangePriority.bind( this );\r\n        this.handleChangeCompleted = this.handleChangeCompleted.bind( this );\r\n        this.handleSubmit = this.handleSubmit.bind( this );\r\n\r\n        // Default state descriptions\r\n        this.state = {\r\n            task_description: \"\",\r\n            task_priority: \"\",\r\n            task_completed: false\r\n        }\r\n    }\r\n\r\n    // Fetch task to be deleted from DB via its ID\r\n    componentDidMount() {\r\n        axios.get( \"http://localhost:4000/tododb/\" + this.props.match.params.id )\r\n        .then( response => {\r\n            this.setState( {\r\n                task_description: response.data.task_description,\r\n                task_priority: response.data.task_priority,\r\n                task_completed: response.data.task_completed\r\n            })\r\n        })\r\n        .catch( ( error ) => {\r\n            console.error( \"Error:\", error )\r\n        })\r\n    }\r\n\r\n    // Ensures the state of the description is always up to date\r\n    handleChangeDescription( e ) {\r\n        this.setState( {\r\n            task_description: e.target.value\r\n        } );\r\n    }\r\n\r\n    // Ensures the state of the priority is always up to date\r\n    handleChangePriority( e ) {\r\n        this.setState( {\r\n            task_priority: e.target.value\r\n        } );\r\n    }\r\n\r\n    // Sets completion state to opposite of current value\r\n    handleChangeCompleted() {\r\n        this.setState( {\r\n            task_completed: !this.state.task_completed\r\n        } );\r\n    }\r\n\r\n    // Sends delete request to DB and removes it from the list\r\n    handleSubmit( e ) {\r\n        // Prevent page from refreshing after submission\r\n        e.preventDefault();\r\n\r\n        // Send delete request to database comprised of url holding ID of task to be removed\r\n        console.log( \"Deleting now...\" );\r\n        axios.post( \"http://localhost:4000/tododb/remove/\" + this.props.match.params.id )\r\n        .then( response => {\r\n            console.log( \"Sent to /remove. \");\r\n        })\r\n        console.log( \"Deleted!\" );\r\n\r\n        // Return user to list after deletion\r\n        this.props.history.push( '/' );\r\n    }\r\n\r\n    // Render function that displays form to user\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 id = \"header1\"> Delete This Task? </h1>\r\n                <form onSubmit = { this.handleSubmit } >\r\n                    <div className = \"form-group\">\r\n                        <label className = \"form-label\"> Task Description: </label>\r\n                        <input type = \"text\"\r\n                               className = \"form-control\"\r\n                               value = { this.state.task_description }\r\n                               readOnly\r\n                               onChange = { this.handleChangeDescription }\r\n                               />\r\n                    </div>\r\n                    <div>\r\n                        <label> Task Priority: </label>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <div className = \"custom-control custom-switch\">\r\n                            <input className = \"custom-control-input\"\r\n                                   type = \"checkbox\"\r\n                                   name = \"priorityOptions\"\r\n                                   id = \"customSwitch1\"\r\n                                   value = \"Low\"\r\n                                   readOnly\r\n                                   checked = { this.state.task_priority === 'Low' }\r\n                                   onChange = { this.handleChangePriority }\r\n                                   />\r\n                            <label className = \"custom-control-label\" htmlFor = \"customSwitch1\"> Low </label>\r\n                        </div>\r\n                        <div className = \"custom-control custom-switch\">\r\n                            <input className = \"custom-control-input\"\r\n                                   type = \"checkbox\"\r\n                                   name = \"priorityOptions\"\r\n                                   id = \"customSwitch2\"\r\n                                   value = \"Medium\"\r\n                                   readOnly\r\n                                   checked = { this.state.task_priority === 'Medium' }\r\n                                   onChange = { this.handleChangePriority }\r\n                                   />\r\n                            <label className = \"custom-control-label\" htmlFor = \"customSwitch2\"> Medium </label>\r\n                        </div>\r\n                        <div className = \"custom-control custom-switch\">\r\n                            <input className = \"custom-control-input\"\r\n                                   type = \"radio\"\r\n                                   name = \"priorityOptions\"\r\n                                   id = \"customSwitch3\"\r\n                                   value = \"High\"\r\n                                   readOnly\r\n                                   checked = { this.state.task_priority === 'High' }\r\n                                   onChange = { this.handleChangePriority }\r\n                                   />\r\n                            <label className = \"custom-control-label\" htmlFor = \"customSwitch3\"> High </label>\r\n                        </div>\r\n                        <div className = \"form-check\">\r\n                            <input className = \"form-check-input\"\r\n                                   type = \"checkbox\"\r\n                                   name = \"completedCheckbox\"\r\n                                   id = \"customSwitch4\"\r\n                                   readOnly\r\n                                   onChange = { this.handleChangeCompleted }\r\n                                   checked = { this.state.task_completed }\r\n                                   value = { this.state.task_completed }\r\n                                   />\r\n                            <label className = \"form-check-label\" htmlFor = \"completedCheckbox\"> Completed </label>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <input type = \"submit\" value = \"Delete Task\" className = \"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","// Page for displaying the actual todo list\r\n\r\n// Necessary import statement\r\nimport React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n// Create object that will act as table of tasks\r\nconst Task = props => (\r\n    <tr>\r\n        <td className = \"taskDescription\"> { props.task.task_description }</td>\r\n        <td className = \"taskPriority\"> { props.task.task_priority } </td>\r\n        <td className = { props.task.task_completed ? \"completed\" : \"\" }> </td>\r\n        <td> \r\n            <Link to = { \"/edit/\" + props.task._id }> Edit Task </Link>\r\n        </td>\r\n        <td>\r\n            <Link to ={ \"/delete/\" + props.task._id }> Delete Task </Link>\r\n        </td>\r\n    </tr>\r\n)\r\n\r\nexport default class todoList extends Component {\r\n    \r\n    constructor( props ) {\r\n        super( props );\r\n\r\n        // Default state consists of empty array, tasks retrieved from DB will be placed here\r\n        this.state = { tasks: [] }\r\n    }\r\n\r\n    // componentDidMount method to execute request to get list of tasks from DB\r\n    componentDidMount() {\r\n        axios.get( \"http://localhost:4000/tododb/\" )\r\n        .then( response => {\r\n            this.setState( { tasks: response.data } );\r\n        } )\r\n        .catch( ( error ) => {\r\n            console.log( error );\r\n        } )\r\n    }\r\n\r\n    // Function to map list of tasks\r\n    taskList() {\r\n        return this.state.tasks.map( ( currentTask, index ) => {\r\n            return < Task task = { currentTask } key = { index } />;\r\n        })\r\n    }\r\n\r\n    // Render function to display table of tasks to user\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 id = \"header1\"> Task List </h1>\r\n                <table id = \"table\" className = \"table table-striped table-bordered table-hover\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th> Description </th>\r\n                            <th> Priority </th>\r\n                            <th> Completed </th>\r\n                            <th> Edit </th>\r\n                            <th> Delete </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { this.taskList() }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/list-task.1953b76e.svg\";","// Landing page\r\n\r\n// Import necessary components for linking, routing, etc.\r\nimport React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport createTask from \"./components/createTask\";\r\nimport editTask from \"./components/editTask\";\r\nimport deleteTask from \"./components/deleteTask\"\r\nimport todoList from \"./components/todoList\";\r\nimport logo from \"./list-task.svg\";\r\n\r\n// Enums for light/dark theme\r\nconst LIGHT_THEME_HEX = \"#E2E8F0\";\r\nconst DARK_THEME_HEX = \"#1A202C\";\r\nconst THEMES = {\r\n  Light: LIGHT_THEME_HEX,\r\n  Dark: DARK_THEME_HEX\r\n};\r\n\r\nconst THEME_KEY = \"THEME\";\r\n\r\nclass App extends Component {\r\n\r\n  // Saves chosen theme to web storage to persist across pages\r\n  saveSettings( value ) {\r\n    window.localStorage.setItem( THEME_KEY, value );\r\n  }\r\n\r\n  // Retrieve saved theme from web storage -- if no theme has been saved yet, default to light theme\r\n  getSettings() {\r\n    return window.localStorage.getItem( THEME_KEY ) ?? THEMES.Light;\r\n  }\r\n\r\n  // Changes theme depending on which one user wants to use\r\n  themeSwitch( theme ) {\r\n    document.body.style.backgroundColor = theme;\r\n    document.body.style.color = theme === THEMES.Dark ? THEMES.Light : THEMES.Dark;\r\n    this.saveSettings( theme );\r\n    // Change theme of table to match -- if table exists on page, performs the changes\r\n    var tableSwitch = document.getElementById( \"table\" );\r\n    if( tableSwitch ) {\r\n      if( theme === THEMES.Dark ) {\r\n        tableSwitch.className = \"table table-striped table-bordered table-hover table-dark\"\r\n      } else if( theme === THEMES.Light ) {\r\n        tableSwitch.className = \"table table-striped table-bordered table-hover\"\r\n      }\r\n    }\r\n    // Change theme of navbar to match\r\n    var navbar = document.getElementById( \"navbar\" );\r\n    if( theme === THEMES.Dark ) {\r\n      navbar.className = \"navbar navbar-expand-lg navbar-dark bg-dark\"\r\n    } else if( theme === THEMES.Light ) {\r\n      navbar.className = \"navbar navbar-expand-lg navbar-light bg-light\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className = \"container\" >\r\n          <nav id = \"navbar\" className = \"navbar navbar-expand-lg navbar-light bg-light\" >\r\n          <img src = { logo } alt = \"Logo\" />\r\n            <Link to = \"/\" className = \"navbar-brand\"> </Link>\r\n            <div className = \"navbar-collapse\">\r\n              <ul className = \"nav nav-tabs\">\r\n                <li className = \"nav-item\">\r\n                  <Link to = \"/\" className = \"nav-link\" aria-current = \"page\"> Task List </Link>\r\n                </li>\r\n                <li className = \"nav-item\">\r\n                  <Link to = \"/create\" className = \"nav-link\"> Create Task</Link>\r\n                </li>\r\n                <div className = \"nav-item ml-auto\">\r\n                  <div className = \"button-holder\">\r\n                    <div className = \"theme-dark\" onClick = { () => this.themeSwitch( THEMES.Dark ) } > </div>\r\n                    <div className = \"theme-light\" onClick = { () => this.themeSwitch( THEMES.Light ) } > </div>\r\n                  </div>\r\n                </div>\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n          <br />\r\n          <Route path = \"/\" exact component = { todoList } />\r\n          <Route path = \"/edit/:id\" component = { editTask } />\r\n          <Route path = \"/create\" component = { createTask } />\r\n          <Route path = \"/delete/:id\" component = { deleteTask } />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}